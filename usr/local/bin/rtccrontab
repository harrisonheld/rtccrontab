#!/usr/bin/env python3

import os
import sys
import shutil
import tempfile
import subprocess
from datetime import datetime, timedelta
import argparse
import logging

try:
    from croniter import croniter
except ImportError:
    print("croniter module missing. Install with: pip install croniter")
    sys.exit(1)

# Logging setup
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S",
)
logger = logging.getLogger("rtccrontab")

BASE_DIR = os.path.expanduser("~/rtccrontab")
SRC_FILE = os.path.join(BASE_DIR, "rtccrontab")
JOB_DIR = os.path.join(BASE_DIR, "jobs")
CRON_D_FILE = f"/etc/cron.d/rtccrontab-{os.getenv('USER')}"
WAKE_OFFSET_MIN = 10
EDITOR = os.getenv("EDITOR", "vi")


def ensure_dirs():
    logger.debug(f"Ensuring directories exist: {BASE_DIR}, {JOB_DIR}")
    os.makedirs(JOB_DIR, exist_ok=True)
    os.makedirs(BASE_DIR, exist_ok=True)


def list_crontab():
    logger.info(f"Listing rtccrontab: {SRC_FILE}")
    if not os.path.exists(SRC_FILE):
        logger.warning("No rtccrontab file found.")
        return
    with open(SRC_FILE) as f:
        print(f.read(), end="")


def remove_crontab():
    logger.info("Removing rtccrontab and jobs")
    if os.path.exists(SRC_FILE):
        os.remove(SRC_FILE)
    if os.path.exists(JOB_DIR):
        shutil.rmtree(JOB_DIR)
    if os.path.exists(CRON_D_FILE):
        try:
            subprocess.run(["sudo", "rm", "-f", CRON_D_FILE], check=True)
        except subprocess.CalledProcessError:
            logger.error("Failed to remove system cron file. Run with sudo.")
    try:
        subprocess.run(["sudo", "rtcwake", "-m", "disable"], check=True)
    except subprocess.CalledProcessError:
        logger.error("Failed to disable rtcwake. Run with sudo.")
    logger.info("rtccrontab removed and rtcwake unset.")


def edit_crontab():
    logger.info(f"Editing rtccrontab: {SRC_FILE}")
    ensure_dirs()
    if not os.path.exists(SRC_FILE):
        open(SRC_FILE, "w").close()
    tmp = tempfile.NamedTemporaryFile(delete=False)
    shutil.copy(SRC_FILE, tmp.name)
    subprocess.run([EDITOR, tmp.name])
    shutil.copy(tmp.name, SRC_FILE)
    os.unlink(tmp.name)
    generate_jobs()
    schedule_next_wake()


def generate_jobs():
    logger.debug("Generating job scripts")
    ensure_dirs()

    # Clean old jobs
    for f in os.listdir(JOB_DIR):
        os.remove(os.path.join(JOB_DIR, f))

    if not os.path.exists(SRC_FILE):
        logger.warning("No rtccrontab file found, skipping job generation")
        return

    with open(SRC_FILE) as f:
        lines = [l.strip() for l in f if l.strip() and not l.startswith("#")]

    cron_lines = []

    for i, line in enumerate(lines, start=1):
        parts = line.split()
        if len(parts) < 6:
            logger.warning(f"Skipping invalid line {i}: {line}")
            continue
        schedule = " ".join(parts[:5])
        command = " ".join(parts[5:])
        job_script_path = os.path.join(JOB_DIR, f"job{i}.sh")

        # Write job wrapper that computes next wake itself
        with open(job_script_path, "w") as js:
            js.write(f"""#!/bin/bash
# DO NOT EDIT
# Job {i} wrapper generated by rtccrontab

# Run the original command
{command}

# Recompute next wake
~/rtccrontab/rtccrontab -w
""")
        os.chmod(job_script_path, 0o755)
        cron_lines.append(f"{schedule} {os.getenv('USER')} {job_script_path}")

    if cron_lines:
        cron_content = "\n".join(cron_lines) + "\n"
        tmp_cron = tempfile.NamedTemporaryFile(delete=False)
        tmp_cron.write(cron_content.encode())
        tmp_cron.close()
        try:
            subprocess.run(["sudo", "mv", tmp_cron.name, CRON_D_FILE], check=True)
            subprocess.run(["sudo", "chmod", "644", CRON_D_FILE], check=True)
            subprocess.run(["sudo", "chown", "root:root", CRON_D_FILE], check=True)
            logger.info(f"Installed {len(cron_lines)} jobs to {CRON_D_FILE}")
        except subprocess.CalledProcessError:
            logger.error("Failed to write system cron. Run with sudo.")
            os.unlink(tmp_cron.name)


def schedule_next_wake():
    """Initial wake setup after generating jobs"""
    ensure_dirs()
    if not os.path.exists(SRC_FILE):
        return

    next_times = []
    with open(SRC_FILE) as f:
        logger.debug(f"Reading rtccrontab: {SRC_FILE}")
        lines = [l.strip() for l in f if l.strip() and not l.startswith("#")]

    for line in lines:
        logger.debug(f"scehedule_next_wake(): Processing line: {line}")
        parts = line.split()
        if len(parts) < 6:
            continue
        schedule = " ".join(parts[:5])
        it = croniter(schedule, datetime.now())
        nxt = it.get_next(datetime) - timedelta(minutes=WAKE_OFFSET_MIN)
        next_times.append(int(nxt.timestamp()))
        logger.debug(f"Wake time for this line: {datetime.fromtimestamp(nxt.timestamp())}")

    logger.debug(f"Next wake times: {next_times}")

    if next_times:
        earliest_waketime = min(next_times)
        logger.debug(f"Earliest wake time: {datetime.fromtimestamp(earliest_waketime)}")
        try:
            # Set rtcwake to the next computed time, do not sleep now
            subprocess.run(["sudo", "rtcwake", "-m", "no", "-t", str(earliest_waketime)], check=True)
            logger.info(f"Scheduled next wake at {datetime.fromtimestamp(earliest_waketime)}")
        except subprocess.CalledProcessError:
            logger.error("Failed to set rtcwake.")


def main():
    parser = argparse.ArgumentParser(description="rtccrontab â€” cron with rtcwake per job")
    parser.add_argument("-e", action="store_true", help="edit rtccrontab")
    parser.add_argument("-l", action="store_true", help="list rtccrontab")
    parser.add_argument("-r", action="store_true", help="remove rtccrontab")
    parser.add_argument("-w", action="store_true", help="schedule next wake")
    parser.add_argument("-v", "--verbose", action="store_true", help="enable verbose logging")
    args = parser.parse_args()

    if args.verbose:
        logger.setLevel(logging.DEBUG)

    if args.l:
        list_crontab()
    elif args.r:
        remove_crontab()
    elif args.e:
        edit_crontab()
    elif args.w:
        schedule_next_wake()
    else:
        parser.print_help()


if __name__ == "__main__":
    main()

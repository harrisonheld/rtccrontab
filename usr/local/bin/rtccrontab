#!/usr/bin/env python3

import os
import sys
import shutil
import tempfile
import subprocess
from datetime import datetime, timedelta
import argparse

try:
    from croniter import croniter
except ImportError:
    print("croniter module missing. Install with: pip install croniter")
    sys.exit(1)

# Directories
BASE_DIR = os.path.expanduser("~/rtccrontab")
SRC_FILE = os.path.join(BASE_DIR, "rtccrontab")
JOB_DIR = os.path.join(BASE_DIR, "jobs")
CRON_D_FILE = f"/etc/cron.d/rtccrontab-{os.getenv('USER')}"
WAKE_OFFSET_MIN = 10  # default offset

EDITOR = os.getenv("EDITOR", "vi")

def ensure_dirs():
    os.makedirs(JOB_DIR, exist_ok=True)
    os.makedirs(BASE_DIR, exist_ok=True)

def list_crontab():
    if not os.path.exists(SRC_FILE):
        print("No rtccrontab file found.")
        return
    with open(SRC_FILE) as f:
        print(f.read(), end="")

def remove_crontab():
    if os.path.exists(SRC_FILE):
        os.remove(SRC_FILE)
    if os.path.exists(JOB_DIR):
        shutil.rmtree(JOB_DIR)
    if os.path.exists(CRON_D_FILE):
        try:
            subprocess.run(["sudo", "rm", "-f", CRON_D_FILE], check=True)
        except subprocess.CalledProcessError:
            print("Failed to remove system cron file. Run with sudo.")
    print("rtccrontab removed.")

def edit_crontab():
    ensure_dirs()
    if not os.path.exists(SRC_FILE):
        open(SRC_FILE, "w").close()
    tmp = tempfile.NamedTemporaryFile(delete=False)
    shutil.copy(SRC_FILE, tmp.name)
    subprocess.run([EDITOR, tmp.name])
    shutil.copy(tmp.name, SRC_FILE)
    os.unlink(tmp.name)
    generate_jobs()

def generate_jobs():
    ensure_dirs()
    # Clean old jobs
    for f in os.listdir(JOB_DIR):
        os.remove(os.path.join(JOB_DIR, f))
    cron_lines = []
    with open(SRC_FILE) as f:
        lines = [l.strip() for l in f if l.strip() and not l.strip().startswith("#")]
    for i, line in enumerate(lines, start=1):
        parts = line.split()
        if len(parts) < 6:
            continue
        # job script
        job_script_path = os.path.join(JOB_DIR, f"job{i}.sh")
        schedule = " ".join(parts[:5])
        command = " ".join(parts[5:])
        with open(job_script_path, "w") as js:
            js.write(f"""#!/bin/bash
# DO NOT EDIT THIS FILE
# Job {i} wrapper generated by rtccrontab
{command}

# Schedule rtcwake 10 minutes before next run
next_ts=$(python3 - <<'EOF'
from croniter import croniter
from datetime import datetime, timedelta
it = croniter("{schedule}", datetime.now())
nxt = it.get_next(datetime)
wake = int((nxt - timedelta(minutes={WAKE_OFFSET_MIN})).timestamp())
print(wake)
EOF
)
sudo rtcwake -m mem -t $next_ts
""")
        os.chmod(job_script_path, 0o755)
        cron_lines.append(f"{schedule} {os.getenv('USER')} {job_script_path}")

        # Write system cron.d file
        cron_content = "\n".join(cron_lines) + "\n"
        tmp_cron = tempfile.NamedTemporaryFile(delete=False)
        tmp_cron.write(cron_content.encode())
        tmp_cron.close()
        try:
            # Move to /etc/cron.d/
            subprocess.run(["sudo", "mv", tmp_cron.name, CRON_D_FILE], check=True)
            # Set permissions and ownership
            subprocess.run(["sudo", "chmod", "644", CRON_D_FILE], check=True)
            subprocess.run(["sudo", "chown", "root:root", CRON_D_FILE], check=True)
            print(f"Installed {len(cron_lines)} jobs to {CRON_D_FILE} (owned by root)")
        except subprocess.CalledProcessError:
            print("Failed to write system cron. Run with sudo.")
            os.unlink(tmp_cron.name)


def main():
    parser = argparse.ArgumentParser(description="rtccrontab â€” cron with rtcwake per job")
    parser.add_argument("-e", action="store_true", help="edit rtccrontab")
    parser.add_argument("-l", action="store_true", help="list rtccrontab")
    parser.add_argument("-r", action="store_true", help="remove rtccrontab")
    args = parser.parse_args()

    if args.l:
        list_crontab()
    elif args.r:
        remove_crontab()
    elif args.e:
        edit_crontab()
    else:
        parser.print_help()

if __name__ == "__main__":
    main()
